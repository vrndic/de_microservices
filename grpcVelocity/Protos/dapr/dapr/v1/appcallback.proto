syntax = "proto3";

package daprserver;

import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";

option csharp_namespace = "DataEngineering.Microservices";

// AppCallback V1 allows user application to interact with Dapr runtime.
// User application needs to implement AppCallback service if it needs to
// receive message from dapr runtime.
service AppCallback {
  // Invokes service method with InvokeRequest.
  rpc OnInvoke (InvokeRequest) returns (InvokeResponse) {}

  // Lists all topics subscribed by this app.
  rpc ListTopicSubscriptions(google.protobuf.Empty) returns (ListTopicSubscriptionsResponse) {}

  // Subscribes events from Pubsub
  rpc OnTopicEvent(TopicEventRequest) returns (TopicEventResponse) {}

  // Lists all input bindings subscribed by this app.
  rpc ListInputBindings(google.protobuf.Empty) returns (ListInputBindingsResponse) {}

  // Listens events from the input bindings
  //
  // User application can save the states or send the events to the output
  // bindings optionally by returning BindingEventResponse.
  rpc OnBindingEvent(BindingEventRequest) returns (BindingEventResponse) {}
}

// TopicEventRequest message is compatible with CloudEvent spec v1.0
// https://github.com/cloudevents/spec/blob/v1.0/spec.md
message TopicEventRequest {
  // id identifies the event. Producers MUST ensure that source + id 
  // is unique for each distinct event. If a duplicate event is re-sent
  // (e.g. due to a network error) it MAY have the same id. 
  string id = 1;

  // source identifies the context in which an event happened.
  // Often this will include information such as the type of the
  // event source, the organization publishing the event or the process
  // that produced the event. The exact syntax and semantics behind
  // the data encoded in the URI is defined by the event producer.
  string source = 2;

  // The type of event related to the originating occurrence. 
  string type = 3;

  // The version of the CloudEvents specification. 
  string spec_version = 4;

  // The content type of data value.
  string data_content_type = 5;

  // The content of the event.
  bytes data = 7;

  // The pubsub topic which publisher sent to.
  string topic = 6;

  // The name of the pubsub the publisher sent to.
  string pubsub_name = 8;
}

// TopicEventResponse is response from app on published message
message TopicEventResponse {
  // TopicEventResponseStatus allows apps to have finer control over handling of the message.
  enum TopicEventResponseStatus {
    // SUCCESS is the default behavior: message is acknowledged and not retried or logged.
    SUCCESS = 0;
    // RETRY status signals Dapr to retry the message as part of an expected scenario (no warning is logged).
    RETRY = 1;
    // DROP status signals Dapr to drop the message as part of an unexpected scenario (warning is logged).
    DROP = 2;
  }

  // The list of output bindings.
  TopicEventResponseStatus status = 1;
}

// BindingEventRequest represents input bindings event.
message BindingEventRequest {
  // Required. The name of the input binding component.
  string name = 1;

  // Required. The payload that the input bindings sent
  bytes data = 2;

  // The metadata set by the input binging components.
  map<string,string> metadata = 3;
}

// BindingEventResponse includes operations to save state or
// send data to output bindings optionally.
message BindingEventResponse {
  // The name of state store where states are saved.
  string store_name = 1;

  // The state key values which will be stored in store_name.
  repeated StateItem states = 2;

  // BindingEventConcurrency is the kind of concurrency 
  enum BindingEventConcurrency {
    // SEQUENTIAL sends data to output bindings specified in "to" sequentially.
    SEQUENTIAL = 0;
    // PARALLEL sends data to output bindings specified in "to" in parallel.
    PARALLEL = 1;
  }

  // The list of output bindings.
  repeated string to = 3;

  // The content which will be sent to "to" output bindings.
  bytes data = 4;

  // The concurrency of output bindings to send data to
  // "to" output bindings list. The default is SEQUENTIAL.
  BindingEventConcurrency concurrency = 5;
}

// ListTopicSubscriptionsResponse is the message including the list of the subscribing topics.
message ListTopicSubscriptionsResponse {
  // The list of topics.
  repeated TopicSubscription subscriptions = 1;
}

// TopicSubscription represents topic and metadata.
message TopicSubscription {
  // Required. The name of the pubsub containing the topic below to subscribe to.
  string pubsub_name = 1;

  // Required. The name of topic which will be subscribed
  string topic = 2;

  // The optional properties used for this topic's subscription e.g. session id
  map<string,string> metadata = 3;
}

// ListInputBindingsResponse is the message including the list of input bindings.
message ListInputBindingsResponse {
  // The list of input bindings.
  repeated string bindings = 1;
}

message InvokeRequest {
	// Required. method is a method name which will be invoked by caller.
	string method = 1;

	// Required. Bytes value or Protobuf message which caller sent.
	// Dapr treats Any.value as bytes type if Any.type_url is unset.
	google.protobuf.Any data = 2;

	// The type of data content.
	//
	// This field is required if data delivers http request body
	// Otherwise, this is optional.
	string content_type = 3;

	// HTTP specific fields if request conveys http-compatible request.
	//
	// This field is required for http-compatible request. Otherwise,
	// this field is optional.
	HTTPExtension http_extension = 4;
}

message HTTPExtension {
	// Type of HTTP 1.1 Methods
	// RFC 7231: https://tools.ietf.org/html/rfc7231#page-24
	enum Verb {
		NONE = 0;
		GET = 1;
		HEAD = 2;
		POST = 3;
		PUT = 4;
		DELETE = 5;
		CONNECT = 6;
		OPTIONS = 7;
		TRACE = 8;
	}

	// Required. HTTP verb.
	Verb verb = 1;

	// querystring includes HTTP querystring.
	map<string, string> querystring = 2;
}


message StateItem {
	// Required. The state key
	string key = 1;

	// Required. The state data for key
	bytes value = 2;

	// The entity tag which represents the specific version of data.
	// The exact ETag format is defined by the corresponding data store.
	string etag = 3;

	// The metadata which will be passed to state store component.
	map<string,string> metadata = 4;

	// Options for concurrency and consistency to save the state.
	StateOptions options = 5;
}


// StateOptions configures concurrency and consistency for state operations
message StateOptions {
	// Enum describing the supported concurrency for state.
	enum StateConcurrency {
		CONCURRENCY_UNSPECIFIED = 0;
		CONCURRENCY_FIRST_WRITE = 1;
		CONCURRENCY_LAST_WRITE = 2;
	}

	// Enum describing the supported consistency for state.
	enum StateConsistency {
		CONSISTENCY_UNSPECIFIED = 0;
		CONSISTENCY_EVENTUAL = 1;
		CONSISTENCY_STRONG = 2;
	}

	StateConcurrency concurrency = 1;
	StateConsistency consistency = 2;
}

message InvokeResponse {
	// Required. The content body of InvokeService response.
	google.protobuf.Any data = 1;

	// Required. The type of data content.
	string content_type = 2;
}